geoda_correlogram(10, 2413.15, clev.points$sale_price, coords)
geoda_correlogram2(20, 1000, clev.points$sale_price, coords)
geoda_correlogram(20, 1000, clev.points$sale_price, coords)
?geom_smooth
ggplot(data = clev.points, aes(x=standardized_sale_price, y = standardized_lag_sale_price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
xlim(-10,10) +
ylim(-10,10) +
ggtitle("Moran scatter plot sale price")
ggplot(data = clev.points, aes(x=standardized_sale_price, y = standardized_lag_sale_price)) +
geom_point() +
stat_plsmo(span = .2, color = "blue") +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
xlim(-10,10) +
ylim(-10,10) +
ggtitle("LOWESS smooth of Moran Scatterplot")
ggplot(clev.points, aes(x=standardized_sale_price,y=standardized_lag_sale_price)) +
geom_point(aes(color=bottom_left)) +
geom_smooth(aes(color=bottom_left), method = lm, se = FALSE) +
geom_smooth(method=lm,se = FALSE, color = "black") +
scale_color_manual(values=c("blue","red"))  +
labs(color="Selection") +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2)
ggplot(clev.points, aes(x=standardized_sale_price,y=standardized_lag_sale_price)) +
geom_point(aes(color=bottom_left)) +
geom_smooth(aes(color=bottom_left), method = lm, se = FALSE) +
geom_smooth(method=lm,se = FALSE, color = "black") +
scale_color_manual(values=c("blue","red"))  +
labs(color="Selection") +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
ggtitle("Chow test Moran Scatterplot")
knitr::opts_chunk$set(echo = TRUE)
library(tmap)
library(sf)
library(spdep)
library(ggplot2)
library(deldir)
library(sp)
library(purrr)
library(geodaData)
clev.points <- geodaData::clev_pts
plot(clev.points)
tmap_mode("view")
tm_shape(clev.points) +
tm_dots()
tmap_mode("plot")
coords <- cbind(clev.points$x,clev.points$y)
knn1 <- knearneigh(coords)
str(knn1)
k1 <- knn2nb(knn1)
critical.threshold <- max(unlist(nbdists(k1,coords)))
critical.threshold
nb.dist.band <- dnearneigh(coords, 0, critical.threshold)
summary(nb.dist.band)
dist.band.card <- card(nb.dist.band)
dist.band.card
ggplot() +
geom_histogram(aes(x=dist.band.card)) +
xlab("Number of Neighbors")
plot(nb.dist.band, coords, lwd=.2, col="blue", cex = .5)
dist.band.iso <- dnearneigh(coords, 0, 1500)
iso.card <- card(dist.band.iso)
ggplot() +
geom_histogram(aes(x=iso.card)) +
xlab("Number of Neighbors")
plot(dist.band.iso, coords, lwd=.2, col="blue", cex = .5)
k6 <- knn2nb(knearneigh(coords, k = 6))
k6.card <- card(k6)
ggplot() +
geom_histogram(aes(x=k6.card)) +
xlab("Number of Neighbors")
k6.card <- card(k6)
ggplot() +
geom_histogram(aes(x=k6.card)) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), bins = 1) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), bins = 2) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), bins = 10) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), bins = 30) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), bins = 50) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), bins = 0) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), binwidth = 1) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), binwidth = 2) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), binwidth = .5) +
xlab("Number of Neighbors")
ggplot() +
geom_histogram(aes(x=k6.card), binwidth = .01) +
xlab("Number of Neighbors")
plot(k6, coords, lwd=.2, col="blue", cex = .5)
vtess <- deldir(clev.points$x, clev.points$y)
plot(vtess, wlines="tess", wpoints="none",
lty=1)
voronoipolygons = function(thiess) {
w = tile.list(thiess)
polys = vector(mode='list', length=length(w))
for (i in seq(along=polys)) {
pcrds = cbind(w[[i]]$x, w[[i]]$y)
pcrds = rbind(pcrds, pcrds[1,])
polys[[i]] = Polygons(list(Polygon(pcrds)), ID=as.character(i))
}
SP = SpatialPolygons(polys)
voronoi = SpatialPolygonsDataFrame(SP, data=data.frame(dummy = seq(length(SP)), row.names=sapply(slot(SP, 'polygons'),
function(x) slot(x, 'ID'))))
}
v <- voronoipolygons(vtess)
plot(v)
vtess.sf <- st_as_sf(v)
plot(vtess.sf$geometry)
st_queen <- function(a, b = a) st_relate(a, b, pattern = "F***T****")
queen.sgbp <- st_queen(vtess.sf)
as.nb.sgbp <- function(x, ...) {
attrs <- attributes(x)
x <- lapply(x, function(i) { if(length(i) == 0L) 0L else i } )
attributes(x) <- attrs
class(x) <- "nb"
x
}
queen.nb <- as.nb.sgbp(queen.sgbp)
queen.nb.card <- card(queen.nb)
ggplot() +
geom_histogram(aes(x=queen.nb.card)) +
xlab("Number of Neighbors")
summary(queen.nb)
plot(queen.nb,coords, lwd=.2, col="blue", cex = .5)
us.bound <- geodaData::ncovr
latitude <- map_dbl(us.bound$geometry, ~st_centroid(.x)[[1]])
longitude <- map_dbl(us.bound$geometry, ~st_centroid(.x)[[2]])
center.coords <- cbind(latitude,longitude)
k.poly <- knn2nb(knearneigh(center.coords, longlat = TRUE))
critical.threshold.poly <- max(unlist(nbdists(k.poly,center.coords, longlat = TRUE)))
nb.dist.band.poly <- dnearneigh(center.coords, 0, critical.threshold.poly, longlat = TRUE)
poly.nb.card <- card(nb.dist.band.poly)
ggplot() +
geom_histogram(aes(x=poly.nb.card)) +
xlab("Number of Neighbors")
class(vtess)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(spdep)
library(geodaData)
clev.points <- geodaData::clev_pts
coords <- cbind(clev.points$x,clev.points$y)
k1 <- knn2nb(knearneigh(coords))
critical.threshold <- max(unlist(nbdists(k1,coords)))
critical.threshold
nb.dist.band <- dnearneigh(coords, 0, critical.threshold)
nb.dist.band <- dnearneigh(coords, 0, critical.threshold)
distances <- nbdists(nb.dist.band,coords)
distances[1]
invd1 <- lapply(distances, function(x) (1/x))
length(invd1)
invd1[1]
invd1a <- lapply(distances, function(x) (1/(x/100)))
invd1a[1]
invd.weights <- nb2listw(nb.dist.band,glist = invd1a,style = "B")
summary(invd.weights)
invd.weights$weights[1]
plot(invd.weights, coords, lwd=.2, col="blue", cex = .5)
k6 <- knn2nb(knearneigh(coords, k = 6))
str(k6)
k.distances <- nbdists(k6, coords)
invd2a <- lapply(k.distances, function(x) (1/(x/100)))
invd2a[1]
invd.weights.knn <- nb2listw(k6,glist = invd2a,style = "B")
invd.weights.knn$weights[1]
kernal.nb <- dnearneigh(coords, 0, critical.threshold)
include.self(kernal.nb)
kernal.nb[[2]]
str(kernal.nb)
kernalw.distances <- nbdists(kernal.nb, coords)
kernalw.distances[1]
uniform <- lapply(kernalw.distances, function(x) x*0 + .5)
uniform[1]
uniform.weights <- nb2listw(kernal.nb,glist = uniform,style = "B")
triangular <- lapply(kernalw.distances, function(x) 1- abs((x/critical.threshold)))
triangular[1]
triang.weights <- nb2listw(kernal.nb,glist = triangular,style = "B")
triang.weights$weights[1]
epanechnikov <- lapply(kernalw.distances, function(x) .75*(1-(x/critical.threshold)^2))
epanechnikov[1]
epan.weights <- nb2listw(kernal.nb,glist = epanechnikov,style = "B")
epan.weights$weights[1]
quartic <- lapply(kernalw.distances, function(x) (15/16)*(1-(x/critical.threshold)^2)^2)
quartic[1]
quartic.weights <- nb2listw(kernal.nb,glist = quartic,style = "B")
quartic.weights$weights[1]
gaussian.w <- lapply(kernalw.distances, function(x) sqrt(2*pi)*exp((-(x/critical.threshold)^2)/2))
gaussian.w[1]
gaussian.weights <- nb2listw(kernal.nb,glist = gaussian.w,style = "B")
gaussian.weights$weights[1]
k.distances1 <- k.distances
for (i in 1:length(k.distances1)){
bandwidth <- max(k.distances1[[i]])
new_row <- 1- abs(k.distances1[[i]] / bandwidth)
k.distances1[[i]] <- new_row
}
k.distances1[[1]]
k7 <- knn2nb(knearneigh(coords, k = 7))
k7.distances <- nbdists(k7, coords)
k.distances2 <- k.distances
for (i in 1:length(k.distances)){
maxk6 <- max(k.distances2[[i]])
maxk7 <- max(k7.distances[[i]])
bandwidth <- (maxk6 + maxk7) /2
new_row <- 1- abs(k.distances2[[i]] / bandwidth)
k.distances2[[i]] <- new_row
}
k.distances2[[1]]
var.band.weights <- nb2listw(k6,glist = k.distances2,style = "B")
var.band.weights$weights[[1]]
B <- as(var.band.weights, "RsparseMatrix")
str(B)
diag(B) <- 1
var.band.w2 <- mat2listw(as(B, "dgTMatrix"))
str(var.band.w2$weights)
var.band.w2$neighbours
var.band.weights$neighbours
summary(var.band.w2)
plot(var.band.w2, coords, lwd=.2, col="blue", cex = .5)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(spdep)
library(tmap)
library(ggplot2)
library(GGally)
library(broom)
library(knitr)
library(tidyverse)
?ggparcoord
clev.points <- geodaData::clev_pts
# getting coordinates
coords <- cbind(clev.points$x,clev.points$y)
# creating neighbors list
k6 <- knn2nb(knearneigh(coords, k = 6))
# converting to weights structure from neighbors list
k6.weights1 <- nb2listw(k6)
k6.weights1$weights[[1]]
lag1 <- lag.listw(k6.weights1, clev.points$sale_price)
df <- data.frame(sale_price = clev.points$sale_price, lag1)
kable(head(df))
nb1 <- k6[[1]]
nb1 <- clev.points$sale_price[nb1]
nb1
summary(clev.points$sale_price)
summary(lag1)
sd(clev.points$sale_price)
sd(lag1)
sale.price <- clev.points$sale_price
pcp.vars <- cbind(sale.price,lag1)
ggparcoord(data = pcp.vars,scale ="globalminmax")
sale.price <- clev.points$sale_price
pcp.vars <- cbind(sale.price,lag1)
ggparcoord(data = pcp.vars,scale ="globalminmax") +
ggtitle("Parallel Coordinate Plot")
lag2 <- lag.listw(k6.weights2, clev.points$sale_price)
library(sf)
library(spdep)
library(tmap)
library(ggplot2)
library(GGally)
library(broom)
library(knitr)
library(tidyverse)
library(purrr)
clev.points <- geodaData::clev_pts
# getting coordinates
coords <- cbind(clev.points$x,clev.points$y)
# creating neighbors list
k6 <- knn2nb(knearneigh(coords, k = 6))
# converting to weights structure from neighbors list
k6.weights1 <- nb2listw(k6)
k6.weights1$weights[[1]]
lag1 <- lag.listw(k6.weights1, clev.points$sale_price)
df <- data.frame(sale_price = clev.points$sale_price, lag1)
kable(head(df))
nb1 <- k6[[1]]
nb1 <- clev.points$sale_price[nb1]
nb1
summary(clev.points$sale_price)
summary(lag1)
sd(clev.points$sale_price)
sd(lag1)
sale.price <- clev.points$sale_price
pcp.vars <- cbind(sale.price,lag1)
ggparcoord(data = pcp.vars,scale ="globalminmax") +
ggtitle("Parallel Coordinate Plot")
binary.weights <- lapply(k6, function(x) 0*x + 1)
k6.weights2 <- nb2listw(k6, glist = binary.weights, style = "B")
lag2 <- lag.listw(k6.weights2, clev.points$sale_price)
df <- df %>% mutate(lag2 = lag2)
kable(head(df))
180+32-58.5
setwd("~/dashboard")
world <- st_read("ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp")
library(sf)
library(tmap)
library(tidyverse)
library(shiny)
world <- st_read("ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp")
setwd("~/dashboard/COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports")
data <- read.csv("03-07-2020.csv")
point_data <- st_as_sf(data, coords = c("Longitude","Latitude"),crs = 4326)
full_data <- st_join(world,point_data)
full_data <- st_join(point_data,world["NAME"])
tmap_mode("plot")
p1 <- tm_shape(full_data) +
tm_symbols(col = "red","Confirmed",scale = 5) +
tm_shape(world) +
tm_borders()
tmap_leaflet(p1)
agg_data <- full_data
st_geometry(agg_data) <- NULL
count <- agg_data %>% group_by(NAME) %>% dplyr::summarise(confirmed_count = sum(Confirmed),
death_count = sum(Deaths),
recovered_count = sum(Recovered))
world_data <- left_join(world, count, by = "NAME")
tm_shape(world_data) +
tm_fill("confirmed_count")
world <- st_read("ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp")
world <- world %>% select("NAME")
point_data <- st_as_sf(data, coords = c("Longitude","Latitude"),crs = 4326)
full_data <- st_join(point_data,world["NAME"])
agg_data <- full_data
st_geometry(agg_data) <- NULL
count <- agg_data %>% group_by(NAME) %>% dplyr::summarise(confirmed_count = sum(Confirmed),
death_count = sum(Deaths),
recovered_count = sum(Recovered))
world_data <- left_join(world, count, by = "NAME")
setwd("~/dashboard/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series")
library(plotly)
setwd("~/dashboard/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series")
ts_confirmed <- read.csv("time_series_19-covid-Confirmed.csv")
ts_values <- ts_confirmed %>% select(-Province.State,-Country.Region,-Lat,-Long)
mat <- as.matrix(ts_values)
int_mat <- t(mat)
tp_data <- as.data.frame(int_mat)
us_ts_con <- ts_confirmed %>% filter(Country.Region == "United States")
unique(ts_confirmed$Country.Region)
us_ts_con <- ts_confirmed %>% filter(Country.Region == "US")
colSums(mat)
sums <- colSums(mat)
setwd("~/GIS3")
knitr::opts_chunk$set(echo = TRUE)
library(tmap)
library(sf)
library(ggplot2)
library(tidyverse)
library(tmap)
library(sf)
library(ggplot2)
library(tidyverse)
data(world)
data(sf)
library(tmap)
library(sf)
library(ggplot2)
library(tidyverse)
library(geodaData)
library(tmap)
library(sf)
library(ggplot2)
library(tidyverse)
library(geodaData)
nyc <- geodaData::nyc
summary(nyc$RENTPCT08)
ggplot(data = nyc, aes(x=RENTPCT08)) +
geom_density()
tmap_mode("view")
tm_shape(nyc) +
tm_fill("RENTPCT08")
nyc <- geodaData::nyc_sf
summary(nyc$RENTPCT08)
tmap_mode("view")
tm_shape(nyc) +
tm_fill("rentpct08")
tmap_mode("view")
tm_shape(nyc) +
tm_fill("rentpct08", style = "quantile") +
tm_borders() +
tm_layout()
summary(nyc$rentpct08)
sd(nyc$rentpct08)
ggplot(data = nyc, aes(x=rentpct08)) +
geom_density() +
geom_histogram()
ggplot(data = nyc, aes(x=rentpct08)) +
geom_density() +
geom_histogram(bins = 60)
ggplot(data = nyc, aes(x=rentpct08)) +
geom_density() +
geom_histogram(bins = 90)
ggplot(data = nyc, aes(x=rentpct08)) +
geom_density() +
geom_histogram(bins = 200)
ggplot(data = nyc, aes(x=rentpct08)) +
geom_density() +
geom_histogram(bins = 10)
ggplot(data = nyc, aes(x=rentpct08)) +
geom_density() +
geom_histogram(bins = 8)
ggplot(data = nyc, aes(x=rentpct08)) +
geom_density() +
geom_histogram(bins = 15)
ggplot(data = nyc, aes(x=rentpct08)) +
geom_density() +
geom_histogram(bins = 30)
ggplot(data = nyc, aes(x=pubast00)) +
geom_density() +
geom_histogram(bins = 30)
ggplot(data = nyc, aes(x=hhsiz00)) +
geom_density() +
geom_histogram(bins = 30)
tm_shape(nyc) +
tm_fill("hhsiz00", style = "quantile", palette = "Blues") +
tm_borders()
ggplot2(data = nyc, aes(x=hhsiz00,y=rentpct08)) +
geom_point() +
geom_density()
ggplot(data = nyc, aes(x=hhsiz00,y=rentpct08)) +
geom_point() +
geom_density()
ggplot(data = nyc, aes(x=hhsiz00,y=rentpct08)) +
geom_point() +
geom_smooth()
library(spData)
nz <- data("nz")
nz_height <- data("nz_height")
nz <- data("nz")
nz_height <- data("nz_height")
cantebury <- nz %>% filter(Name -- "Canterbury")
nz <- data("nz")
nz_height <- data("nz_height")
cantebury <- nz %>% filter(Name == "Canterbury")
nz <- data("nz")
cantebury <- nz %>% filter(Name == "Canterbury")
nz
?data
nz <- data("nz",package = "spData")
nz
?data
cantebury <- nz %>% filter(Name == "Canterbury")
cantebury <- nz %>% filter(Name == "Canterbury")
cantebury <- nz %>% filter(Name == "Canterbury")
cantebury <- nz %>% filter(Name == "Canterbury")
cantebury <- nz %>% filter(Name == "Canterbury")
cantebury <- nz %>% filter(Name == "Canterbury")
cantebury <- nz %>% filter(Name == "Canterbury")
nz <- spData::nz
nz_height <- spData::nz_height
nz <- spData::nz
cantebury <- nz %>% filter(Name == "Canterbury")
nrow(nz_height[canterbury,])
canterbury <- nz %>% filter(Name == "Canterbury")
nrow(nz_height[canterbury,])
peaks <- st_join(nz_height, nz) %>%
group_by(Name) %>%
count()
peaks
peaks <- st_join(nz_height, nz) %>%
group_by(Name) %>%
count() %>%
order_by(n)
peaks <- st_join(nz_height, nz) %>%
group_by(Name) %>%
count() %>%
order_by("n")
peaks <-
st_join(nz_height,nz) %>%
group_by(Name) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
st_drop_geometry()
peaks
library(knitr)
peaks <-
st_join(nz_height,nz) %>%
group_by(Name) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
st_drop_geometry()
kable(peaks)
peaks
install.packages("spDataLarge")
ndvi <- system.file("raster/landsat.tif", package="spDataLarge")
setwd("~/GIS3")
ggplot(data = nyc, aes(x=rentpct08)) +
geom_histogram(bins = 30)
ggplot(data = nyc, aes(x=hhsiz08)) +
geom_histogram(bins = 30)
